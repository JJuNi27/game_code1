import random

# 아이템 클래스
class Item:
    def __init__(self, name, grade, attack_boost, health_boost):
        self.name = name
        self.grade = grade
        self.attack_boost = attack_boost
        self.health_boost = health_boost

    def __str__(self):
        return f"{self.name} ({self.grade})"

# 플레이어 클래스
class Player:
    def __init__(self, name):
        self.name = name
        self.health = 100
        self.attack = 10
        self.coins = 50  # 초기 재화
        self.items = []

    def buy_item(self, item):
        if self.coins >= 10:  # 아이템 가격 10으로 설정
            self.coins -= 10
            self.items.append(item)
            print(f"{item.name}를(을) 구매하였습니다!")
        else:
            print("재화가 부족합니다.")

    def heal(self):
        heal_amount = 20
        self.health = min(100, self.health + heal_amount)
        print(f"체력이 {heal_amount}만큼 회복되었습니다. 현재 체력: {self.health}")

    def show_stats(self):
        print(f"\n플레이어 {self.name} 상태: 체력 {self.health} / 공격력 {self.attack} / 재화 {self.coins}")

# 몬스터 클래스
class Monster:
    def __init__(self, name, health, attack, grade):
        self.name = name
        self.health = health
        self.attack = attack
        self.grade = grade

    def show_stats(self):
        print(f"\n[몬스터] {self.name} ({self.grade}) - 체력: {self.health}, 공격력: {self.attack}")

# 제련소 클래스 (아이템 합성)
class Refinery:
    def refine_items(self, grade):
        print(f"{grade} 등급 아이템 합성 중...")
        if grade == "노말":
            return Item("강화된 노말 아이템", "에픽", 5, 5)
        elif grade == "에픽":
            return Item("강화된 에픽 아이템", "전설", 10, 10)
        return None

# 전투 함수
def battle(player, monster):
    while player.health > 0 and monster.health > 0:
        print(f"\n플레이어 공격! 몬스터 {monster.name} 체력: {monster.health}")
        monster.health -= player.attack
        if monster.health <= 0:
            print(f"몬스터 {monster.name}를 처치했습니다!")
            drop_item(player, monster)
            return True
        print(f"몬스터 공격! 플레이어 체력: {player.health}")
        player.health -= monster.attack
    print("플레이어가 패배했습니다!")
    return False

# 아이템 드랍 함수
def drop_item(player, monster):
    drop_chance = random.random()
    if monster.grade == "일반" and drop_chance < 0.7:  # 일반 몬스터 70% 확률
        item = random.choice(normal_items)
        print(f"몬스터가 {item.name}를 드랍했습니다!")
        player.items.append(item)
    elif monster.grade == "레어" and drop_chance < 0.5:  # 레어 몬스터 50% 확률
        item = random.choice(epic_items)
        print(f"몬스터가 {item.name}를 드랍했습니다!")
        player.items.append(item)
    elif monster.grade == "보스" and drop_chance < 0.8:  # 보스 몬스터 80% 확률
        item = random.choice(legendary_items)
        print(f"몬스터가 {item.name}를 드랍했습니다!")
        player.items.append(item)
    else:
        print("몬스터가 아무것도 드랍하지 않았습니다.")

# 던전 탐험
def dungeon(player):
    refinery = Refinery()
    dungeon_rounds = 0  # 던전 탐험 횟수 (초반 몬스터 등장 확률을 조정하기 위해 사용)
    
    while player.health > 0:
        print("\n🔍 던전 탐험 중...")
        
        # 던전 탐험 횟수에 따라 몬스터 확률 변경
        if dungeon_rounds < 5:  # 초반 5라운드
            monster_grade_probability = ["일반"] * 7 + ["레어"] * 2 + ["보스"] * 1
        elif dungeon_rounds < 10:  # 중반 5~10라운드
            monster_grade_probability = ["일반"] * 5 + ["레어"] * 3 + ["보스"] * 2
        else:  # 후반 10라운드 이후
            monster_grade_probability = ["일반"] * 3 + ["레어"] * 4 + ["보스"] * 3
        
        # 몬스터 등급을 확률에 맞게 랜덤으로 선택
        grade = random.choice(monster_grade_probability)

        event = random.choices(["monster", "shop", "rest", "trap", "refinery"], [0.5, 0.2, 0.2, 0.1, 0.1])[0]
        
        if event == "monster":
            monster_name = random.choice(["악몽의 괴물", "지옥의 사자", "구름의 마왕", "불사의 괴물", "어둠의 지배자"])
            
            # 선택한 몬스터 등급에 따라 몬스터 생성
            if grade == "일반":
                monster = Monster(monster_name, health=30, attack=5, grade="일반")
            elif grade == "레어":
                monster = Monster(monster_name, health=50, attack=10, grade="레어")
            else:  # 보스
                monster = Monster(monster_name, health=100, attack=20, grade="보스")

            monster.show_stats()
            if not battle(player, monster):
                restart = input("게임이 종료되었습니다. 다시 시작하시겠습니까? (y/n): ").lower()
                if restart == "y":
                    player.health = 100
                    continue
                else:
                    break
            
            # 던전 라운드 진행
            dungeon_rounds += 1
        
        elif event == "shop":
            print("\n🛒 상점을 발견했습니다!")
            shop_items = normal_items + epic_items + legendary_items
            print("상점 아이템:", [item.name for item in shop_items])
            item_choice = input("아이템을 구매하시겠습니까? (y/n): ").lower()
            if item_choice == "y":
                item = random.choice(shop_items)
                player.buy_item(item)
        elif event == "rest":
            print("\n💤 쉼터에서 휴식을 취합니다.")
            player.heal()
        elif event == "trap":
            print("\n⚠️ 함정에 빠졌습니다! 체력 20 감소!")
            player.health -= 20
        elif event == "refinery":
            print("\n🛠️ 제련소에 도착했습니다. 아이템 합성!")
            item_grade = input("합성할 아이템 등급을 입력하세요 (노말, 에픽, 전설): ").lower()
            new_item = refinery.refine_items(item_grade.capitalize())
            if new_item:
                print(f"제련소에서 합성된 아이템: {new_item.name}")

# 아이템 목록
normal_items = [Item("노말 검", "노말", 5, 0), Item("노말 방패", "노말", 0, 5)]
epic_items = [Item("에픽 검", "에픽", 10, 0), Item("에픽 방패", "에픽", 0, 10)]
legendary_items = [Item("전설 검", "전설", 20, 0), Item("전설 방패", "전설", 0, 20)]

# 게임 시작
def main():
    print("⚔️ 던전 모험 게임 시작!")
    player_name = input("플레이어 이름을 입력하세요: ")
    player = Player(player_name)
    
    dungeon(player)  # 던전 탐험 시작

if __name__ == "__main__":
    main()
